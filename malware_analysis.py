import argparse
import sys
from datetime import timedelta
import time

from sklearn.model_selection import KFold, StratifiedKFold
from sklearn import linear_model
from sklearn import naive_bayes
from sklearn import svm

import constants as const
import data_cleaner as dc
import data_reader
import model

ClassifierMap = {
    'MultinomialNB': [naive_bayes.MultinomialNB(), 'MultinomialNB'],
    'BernoulliNB': [naive_bayes.BernoulliNB(), 'BernoulliNB'],
    'SGDC': [linear_model.SGDClassifier(max_iter=1000, tol=1e-3, n_jobs=-1), 'SGDClassifier'],
    'LinearSVC': [svm.LinearSVC(max_iter=2000), 'LinearSVC'],
    'SVM': [svm.SVC(kernel='linear', class_weight='balanced', probability=True), 'SVM'],
}


def main():
    parser = argparse.ArgumentParser(description='Android Malware Classificator')
    parser.add_argument('method', type=str,
                        help='NaiveBayes=MultinomialNB, SGDC=SGDClassifier, LinearSVC=LinearSVC, SVM=SVM')
    parser.add_argument('--type', type=str, default='class')
    parser.add_argument('-s', type=str, help='Feature subset', default='S6,S7')
    args = parser.parse_args()

    if args.method not in ClassifierMap.keys():
        print("Method ", args.method, " not available.")
        sys.exit(1)

    print('Generate the data set with: ', args.s.split(','))
    filename = data_reader.generate_data(const.BIG_DATA, args.s.split(','))

    # Select data cleaner based on classifier
    if args.method[1] == 'MultinomialNB':
        print('Bayes cleaner')
        cleaner = dc.bayes
    else:
        print('Linear Classifier cleaner')
        cleaner = dc.linear

    classifier = ClassifierMap[args.method][0]

    X, y = cleaner(filename)
    print('Train and evaluation of the model...')
    print(args.method + ' ' + args.s)
    # START Mesure execution time
    start = time.time()
    kfold = KFold(10, True, 1)
    s_kfold = StratifiedKFold(10, True, 1)
    accuracy, precision, recall, fscore = model.validation(X, y, classifier, s_kfold)
    end = time.time()
    print('Accuracy: ' + repr(accuracy))
    print('Precision: ' + repr(precision))
    print('Recall: ' + repr(recall))
    print('F1 score: ' + repr(fscore))
    print('Execution Time: ' + timer(start, end))
    print('')
    print('Plotting learning curve...')
    model.plot(X, y, classifier, s_kfold)
    print('Done.')


# def main():
#     print('Generate the data set...')
#     filename = data_reader.generate_data(const.BIG_DATA, ['S6', 'S7'])
#     X, y = dc.clean_data_bayes(filename)
#     # X, y = dc.clean_data_linear_family(filename)
#     print('Train and evaluation of the model...')
#     # START Mesure execution time
#     atexit.register(endlog)
#     log("Start Program")
#     # END Mesure execution time
#     classifier = ClassifierMap['MultinomialNB'][0]
#     accuracy, precision, recall, fscore = model.validation(classifier, X, y)
#     print('Accuracy: ' + repr(accuracy))
#     print('Precision: ' + repr(precision))
#     print('Recall: ' + repr(recall))
#     print('F1 score: ' + repr(fscore))
#     print('')


def timer(start, end):
    hours, rem = divmod(end - start, 3600)
    minutes, seconds = divmod(rem, 60)
    return "{:0>2}:{:0>2}:{:05.2f}".format(int(hours), int(minutes), seconds)


if __name__ == '__main__':
    main()
