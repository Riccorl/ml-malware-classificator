import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, fbeta_score, make_scorer
from sklearn.model_selection import KFold, StratifiedKFold
from sklearn.model_selection import cross_validate

import data_plotter as dp

np.random.seed(42)


def validation(estimator, X, y):
    kfold = KFold(10, True, 1)
    s_kfold = StratifiedKFold(10, True, 1)
    scoring = {
        'accuracy': make_scorer(accuracy_score),
        'precision': make_scorer(precision_score, pos_label='malware'),
        'recall': make_scorer(recall_score, pos_label='malware'),
        'f1': make_scorer(fbeta_score, beta=1, pos_label='malware')
    }
    # plot(estimator, X, y, kfold)
    scores = cross_validate(estimator, X, y, cv=kfold, scoring=scoring)
    return np.mean(scores['test_accuracy']), np.mean(scores['test_precision']), np.mean(scores['test_recall']), np.mean(scores['test_f1'])


def plot(estimator, X, y, cv):
    title = "Learning Curves"
    # Cross validation with 100 iterations to get smoother mean test and train
    # score curves, each time with 20% data randomly selected as a validation set.
    dp.plot_learning_curve(estimator, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=4,
                           train_sizes=np.linspace(0.01, 1.0, 20))
    plt.show()
