import csv
import json
import os
import re
from pathlib import Path
from urllib.parse import urlsplit

import constants as const

MANIFEST_DICT = {
    const.S1: 'feature',
    const.S2: 'permission',
    const.S3: ['activity', 'service_receiver', 'provider', 'service'],
    const.S4: 'intent',
    const.S5: 'api_call',
    const.S6: 'real_permission',
    const.S7: 'call',
    const.S8: 'url',
}

def generate_data(path):
    family_file = os.path.join(path, const.FAMILY_FILENAME)
    dataset_path = os.path.join(path, const.DATASET_FILENAME)
    dataset_file = Path(dataset_path)
    state_file = Path(const.STATE)

    if dataset_file.exists():
        print('Dataset exists, file generation will be skipped')
    else:
        with open(family_file) as file:
            reader = csv.reader(file, delimiter=',')
            next(reader, None)  # skip the headers

            with open(dataset_path, mode='w') as dataset:
                dataset_writer = csv.writer(dataset, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                for row in reader:
                    dataset_writer.writerow([row[0], row[1]])

    return


# ------------------------ NAIVE BAYES -------------------------------------
def generate_data_bayes(path, features_list):
    family_file = os.path.join(path, const.FAMILY_FILENAME)
    dataset_path = os.path.join(path, const.DATASET_NAIVE_FILENAME)
    feature_path = os.path.join(path, const.FEATURES)
    dataset_file = Path(dataset_path)
    state_file = Path(const.STATE)

    if dataset_file.exists() and state_file.exists():
        print('Dataset exists')
        with open('state.json') as f:
            state = json.load(f)
            if state.get('features_list', []) == features_list:
                print('Dataset is consistent, the generation of a new dataset will be skipped')
                return dataset_path
            else:
                print('Dataset is incosistent, generating a new dataset...')

    with open(state_file, 'w') as state_writer:
        json.dump({'features_list': features_list}, state_writer)

    with open(family_file) as file:
        reader = csv.reader(file, delimiter=',')
        next(reader, None)  # skip the headers
        malware_dict = {rows[0]: rows[1] for rows in reader}

    with open(dataset_path, mode='w') as dataset:
        mainfest_subset = dict((k, MANIFEST_DICT[k]) for k in features_list if k in MANIFEST_DICT)
        for file in os.listdir(feature_path):
            label = malware_dict.get(file, "safeware")
            feature = extract_feature_naive(os.path.join(feature_path, file), mainfest_subset)
            dataset.write(label + '\t' + feature + "\n")

    return dataset_path


def extract_feature_naive(filename, features_dict):
    feature = ''
    with open(filename, mode='r') as file:
        for line in file:
            line = line.strip()
            splitted = re.split(':{2}', line)
            if splitted[0] in features_dict.values():
                feature = ' '.join([feature, extract(splitted[0], splitted[1])])

    return feature[1:]

def extract(category, feature):
    switch = {
        'feature':extract_feature,
        'permission': extract_permission,
        'activity': extract_activity,
        'service_receiver': extract_service_receiver,
        'provider': extract_provider,
        'service': extract_service,
        'intent': extract_intent,
        'api_call': extract_api_call,
        'real_permission': extract_permission,
        'call': extract_call,
        'url': extract_url
    }
    return switch[category](feature)

def extract_url(string):
    try:
        base_url = "{0.scheme}://{0.netloc}/".format(urlsplit(string))
        if len(base_url) > 10:
            return base_url
    except:
        # print('Error html: ', string)
        return None


# Extract api_call
def extract_api_call(string):
    try:
        string = string.replace(';->', '/')
        api_call = string.split('/')
        return ' '.join(api_call)
    except:
        return None


# Extract feature
def extract_feature(string):
    try:
        feature = string.split('.')[-1]
        return feature
    except:
        return None


# Extract permission and real_permission
def extract_permission(string):
    try:
        permission = string.split('.')[-1].lower()
        return permission
    except:
        return None


# Extract call
def extract_call(string):
    try:
        call = string.lower()
        return call
    except:
        return None


# Extract activity
def extract_activity(string):
    try:
        activity = string.split('.')[-1].lower()
        return activity
    except:
        return None


# Extract intent
def extract_intent(string):
    try:
        intent = string.split('.')[-1].lower()
        return intent
    except:
        return None


# Extract service_receiver
def extract_service_receiver(string):
    try:
        service_receiver = string.split('.')[-1].lower()
        return service_receiver
    except:
        return None


# Extract service_receiver
def extract_service(string):
    try:
        return string
    except:
        return None


# Extract provider
def extract_provider(string):
    try:
        provider = string.split('.')[-1].lower()
        return provider
    except:
        return None
