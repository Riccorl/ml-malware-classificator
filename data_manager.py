import csv
import json
import os
import re
from pathlib import Path

import constants as const

MANIFEST_DICT = {
    const.S1: 'feature',
    const.S2: 'permission',
    const.S3: ['activity', 'service_receiver', 'provider', 'service'],
    const.S4: 'intent',
    const.S5: 'api_call',
    const.S6: 'real_permission',
    const.S7: 'call',
    const.S8: 'url',
}


def generate_data(path):
    family_file = os.path.join(path, const.FAMILY_FILENAME)
    dataset_path = os.path.join(path, const.DATASET_FILENAME)
    dataset_file = Path(dataset_path)
    state_file = Path(const.STATE)

    if dataset_file.exists():
        print('Dataset exists, file generation will be skipped')
    else:
        with open(family_file) as file:
            reader = csv.reader(file, delimiter=',')
            next(reader, None)  # skip the headers

            with open(dataset_path, mode='w') as dataset:
                dataset_writer = csv.writer(dataset, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)
                for row in reader:
                    dataset_writer.writerow([row[0], row[1]])

    return


# ------------------------ NAIVE BAYES -------------------------------------
def generate_data_bayes(path, features_list):
    family_file = os.path.join(path, const.FAMILY_FILENAME)
    dataset_path = os.path.join(path, const.DATASET_NAIVE_FILENAME)
    feature_path = os.path.join(path, const.FEATURES)
    dataset_file = Path(dataset_path)
    state_file = Path(const.STATE)

    if dataset_file.exists() and state_file.exists():
        print('Dataset exists')
        with open('state.json') as f:
            state = json.load(f)
            if state.get('features_list', []) == features_list:
                print('Dataset is consistent, the generation of a new dataset will be skipped')
                return dataset_path
            else:
                print('Dataset is incosistent, generating a new dataset...')

    with open(state_file, 'w') as state_writer:
        json.dump({'features_list': features_list}, state_writer)

    with open(family_file) as file:
        reader = csv.reader(file, delimiter=',')
        next(reader, None)  # skip the headers
        malware_dict = {rows[0]: rows[1] for rows in reader}

    with open(dataset_path, mode='w') as dataset:
        for file in os.listdir(feature_path):
            dataset.write(malware_dict.get(file, "safeware") + '\t' +
                          extract_feature_naive(os.path.join(feature_path, file), dict(
                              (k, MANIFEST_DICT[k]) for k in features_list if k in MANIFEST_DICT)) + "\n")

    return dataset_path


def extract_feature_naive(filename, features_dict):
    feature = ''
    with open(filename, mode='r') as file:
        for line in file:
            line = line.strip()
            splitted = re.split(':{2}', line)
            if splitted[0] in features_dict.values():
                feature = ','.join([feature, splitted[1]])

    return feature[1:]
