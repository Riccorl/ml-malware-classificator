import argparse
import sys
import time
from pathlib import Path

from sklearn import ensemble
from sklearn import linear_model
from sklearn import naive_bayes
from sklearn import svm
from sklearn.model_selection import KFold, StratifiedKFold

import constants as const
import data_cleaner as dc
import data_reader
import model
import utils

ClassifierMap = {
    "mnb": [naive_bayes.MultinomialNB(), "MultinomialNB"],
    "bnb": [naive_bayes.BernoulliNB(), "BernoulliNB"],
    "sgdc": [
        linear_model.SGDClassifier(max_iter=1000, tol=1e-3, n_jobs=-1),
        "SGDClassifier",
    ],
    "lsvc": [svm.LinearSVC(C=0.1, max_iter=2000), "LinearSVC"],
    "svm": [svm.SVC(kernel="poly", degree=3, gamma="auto"), "SVM"],
    "rf": [
        ensemble.RandomForestClassifier(n_estimators=1000, n_jobs=-1),
        "RandomForestClassifier",
    ],
}


def main():
    args = parse_args()

    if args.method not in ClassifierMap.keys():
        print("Method ", args.method, " not available.")
        sys.exit(1)

    print("Generate the data set with: ", args.s.split(","))
    filename = data_reader.generate_data(Path(args.data), args.s.split(","))
    print(filename)
    if args.method == "mnb" or args.method == "bnb":
        print("Bayes cleaner")
        cleaner = dc.bayes if args.type == "detection" else dc.bayes_family
    else:
        print("Linear Classifier cleaner")
        cleaner = dc.linear if args.type == "detection" else dc.linear_family
    X, y = cleaner(filename)

    classifier = ClassifierMap[args.method][0]
    print("Train and evaluation of the model...")
    print(ClassifierMap[args.method][1] + " " + args.s)
    # START Mesure execution time
    start = time.time()
    kfold = KFold(10, True, 1)
    s_kfold = StratifiedKFold(10, True, 1)
    accuracy, precision, recall, fscore, auc = model.validation(
        X, y, classifier, kfold, args.type
    )
    end = time.time()
    print("Accuracy: " + repr(accuracy))
    print("Precision: " + repr(precision))
    print("Recall: " + repr(recall))
    print("F1 score: " + repr(fscore))
    print("AUC Score: " + repr(auc))
    print("Execution Time: " + utils.timer(start, end))
    print("")
    print("Plotting learning curve...")
    model.plot(X, y, classifier, s_kfold)
    print("Done.")


# def main():
#     print('Generate the data set...')
#     filename = data_reader.generate_data(const.BIG_DATA, ["S2", "S4", "S5", "S6", "S7"])
#     X, y = dc.linear(filename)
#     # X, y = dc.clean_data_linear_family(filename)
#     print('Train and evaluation of the model...')
#     # START Mesure execution time
#     start = time.time()
#     # END Mesure execution time
#     # classifier = svm.LinearSVC(C=10.0, max_iter=7000)
#     classifier = ensemble.RandomForestClassifier(n_estimators=100)
#     kfold = KFold(10, True, 1)
#     accuracy, precision, recall, fscore = model.validation_family(X, y, classifier, kfold)
#     end = time.time()
#     print('Accuracy: ' + repr(accuracy))
#     print('Precision: ' + repr(precision))
#     print('Recall: ' + repr(recall))
#     print('F1 score: ' + repr(fscore))
#     print('Execution Time: ' + timer(start, end))


def parse_args():
    parser = argparse.ArgumentParser(description="Android Malware Classificator")
    parser.add_argument(
        type=str,
        help="mnb=MultinomialNB, bnb=BernoulliNB, sgdc=SGDClassifier, lsvc=LinearSVC, svm=SVM, rf=RandomForest",
        dest="method",
    )
    parser.add_argument(
        "-d",
        type=str,
        help="path to the dataset folder",
        default=const.MEDIUM_DATA,
        dest="data",
    )
    parser.add_argument("--type", type=str, default="detection")
    parser.add_argument("-s", type=str, help="Feature subset", default="S6,S7")

    return parser.parse_args()


if __name__ == "__main__":
    main()
