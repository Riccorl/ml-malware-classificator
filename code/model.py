import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    fbeta_score,
    roc_auc_score,
    make_scorer,
)
from sklearn.model_selection import cross_validate

import data_plotter as dp

np.random.seed(42)

scoring_detection = {
    "accuracy": make_scorer(accuracy_score),
    "precision": make_scorer(precision_score, pos_label=1),
    "recall": make_scorer(recall_score, pos_label=1),
    "f1": make_scorer(fbeta_score, beta=1, pos_label=1),
    "auc": make_scorer(roc_auc_score),
}

scoring_family = {
    "accuracy": make_scorer(accuracy_score),
    "precision": make_scorer(precision_score, average="macro"),
    "recall": make_scorer(recall_score, average="macro"),
    "f1": make_scorer(fbeta_score, beta=1, average="macro"),
}


def validation(X, y, estimator, cv, type):
    if type == "detection":
        return validation_detection(X, y, estimator, cv)
    else:
        return validation_family(X, y, estimator, cv)


def validation_detection(X, y, estimator, cv):
    scores = cross_validate(
        estimator, X, y, cv=cv, scoring=scoring_detection, n_jobs=-1
    )
    return (
        np.mean(scores["test_accuracy"]),
        np.mean(scores["test_precision"]),
        np.mean(scores["test_recall"]),
        np.mean(scores["test_f1"]),
        np.mean(scores["test_auc"]),
    )


def validation_family(X, y, estimator, cv):
    scores = cross_validate(estimator, X, y, cv=cv, scoring=scoring_family, n_jobs=-1)
    return (
        np.mean(scores["test_accuracy"]),
        np.mean(scores["test_precision"]),
        np.mean(scores["test_recall"]),
        np.mean(scores["test_f1"]),
        0,
    )


def plot(X, y, estimator, cv):
    title = "Learning Curves"
    # Cross validation with 100 iterations to get smoother mean test and train
    # score curves, each time with 20% data randomly selected as a validation set.
    dp.plot_learning_curve(
        estimator,
        title,
        X,
        y,
        ylim=(0.7, 1.01),
        cv=cv,
        n_jobs=-1,
        train_sizes=np.linspace(0.01, 1.0, 20),
    )
    plt.show()
